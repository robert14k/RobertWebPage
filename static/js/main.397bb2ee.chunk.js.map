{"version":3,"sources":["Components/InfoContainer.tsx","Components/HomeLayout.tsx","App.tsx","serviceWorker.ts","index.tsx","images/mountain-names.jpg","images/Fall_2018_headshot.jpg"],"names":["AddComment","state","react_default","a","createElement","Fragment","row","style","height","avatar","size","src","Headshot","zIndex","card","backgroundColor","borderColor","Component","defaultProps","HomeLayout","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","sectionStyle","flex","backgroundImage","Background","backgroundPosition","backgroundSize","width","overflow","inherits","createClass","key","value","className","col","span","InfoContainer_AddComment","App","react","HomeLayout_HomeLayout","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"8QAcqBA,6MAMnBC,MAA6B,2EAG3B,OACEC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKC,MAAO,CAAEC,OAAQ,SACpBN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAQC,KAAM,IAAKC,IAAKC,IAAUL,MAAO,CAAEM,OAAQ,MAErDX,EAAAC,EAAAC,cAAA,OAAKG,MAAO,CAAEC,OAAQ,SACpBN,EAAAC,EAAAC,cAACU,EAAA,EAAD,CACEP,MAAO,CACLC,OAAQ,OACRO,gBAAiB,UACjBC,YAAa,YAGfd,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKC,MAAO,CAAEC,OAAQ,UAPxB,6BAf8BS,aAAnBjB,EAIZkB,aAAe,GCPjB,IAAMC,EAAb,SAAAC,GAAA,SAAAD,IAAA,IAAAE,EAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,GAAA,QAAAO,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAAA,OAAAT,EAAAC,OAAAS,EAAA,EAAAT,CAAAE,MAAAJ,EAAAE,OAAAU,EAAA,EAAAV,CAAAJ,IAAAe,KAAAC,MAAAd,EAAA,CAAAI,MAAAW,OAAAP,MAGEQ,aAAe,CACbC,KAAM,IACNC,gBAAe,OAAAH,OAASI,IAAT,KACfC,mBAAoB,aACpBC,eAAgB,QAChBC,MAAO,OACPnC,OAAQ,QACRoC,SAAU,UAVdtB,EAAA,OAAAC,OAAAsB,EAAA,EAAAtB,CAAAJ,EAAAC,GAAAG,OAAAuB,EAAA,EAAAvB,CAAAJ,EAAA,EAAA4B,IAAA,SAAAC,MAAA,WAgBI,OACE9C,EAAAC,EAAAC,cAAA,OAAKG,MAAOkB,KAAKY,cACfnC,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKC,MAAO,CAAEC,OAAQ,SACtBN,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAK2C,UAAU,aAAa1C,MAAO,CAAEC,OAAQ,QAA7C,SAGAN,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKC,MAAO,CAAEoC,MAAO,SACnBzC,EAAAC,EAAAC,cAAC8C,EAAA,EAAD,CAAKC,KAAM,GAAX,OACAjD,EAAAC,EAAAC,cAAC8C,EAAA,EAAD,CAAKC,KAAM,IAETjD,EAAAC,EAAAC,cAACgD,EAAD,OAEFlD,EAAAC,EAAAC,cAAC8C,EAAA,EAAD,CAAKC,KAAM,GAAX,aA5BVhC,EAAA,CAAgCF,aCkBjBoC,EAtBO,WACpB,OACEC,EAAA,qBAAKL,UAAU,OACbK,EAAA,cAACC,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,wDE3InBC,EAAAC,QAAiBC,EAAAC,EAAuB,+DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.397bb2ee.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Headshot from \"../images/Fall_2018_headshot.jpg\";\r\nimport { Row, Card, Avatar } from \"antd\";\r\n\r\nimport \"../Style.css\";\r\n\r\nexport interface IInfoContainerProps {\r\n  //none\r\n}\r\n\r\nexport interface IInfoContainerState {\r\n  //none\r\n}\r\n\r\nexport default class AddComment extends Component<\r\n  IInfoContainerProps,\r\n  IInfoContainerState\r\n> {\r\n  static defaultProps = {};\r\n\r\n  state: IInfoContainerState = {};\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Row style={{ height: \"64px\" }}>\r\n          <Avatar size={128} src={Headshot} style={{ zIndex: 1 }} />\r\n        </Row>\r\n        <div style={{ height: \"80vh\" }}>\r\n          <Card\r\n            style={{\r\n              height: \"auto\",\r\n              backgroundColor: \"#ECECEC\",\r\n              borderColor: \"#ECECEC\"\r\n            }}\r\n          >\r\n            <Row style={{ height: \"64px\" }} />\r\n            Info about me...\r\n          </Card>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n//import { Box, Grid  } from 'grommet';\r\nimport \"../Style.css\";\r\nimport Background from \"../images/mountain-names.jpg\";\r\n//import Lake from '../images/mountainLake.jpg';\r\nimport { Row, Col } from \"antd\";\r\nimport InfoContainer from \"./InfoContainer\";\r\n//import { Grid, Row, Col } from 'react-flexbox-grid';\r\n\r\n//  const { Row } = Grid;\r\n\r\nexport class HomeLayout extends Component<{}> {\r\n  //i want to have a array of background immagaes that randomly assign to the background so it wont always be the same immage, thatd be cool...\r\n  //im not actually using this sectin style, i might later clean it up and actually use it\r\n  sectionStyle = {\r\n    flex: \"1\",\r\n    backgroundImage: `url(${Background})`,\r\n    backgroundPosition: \"center top\",\r\n    backgroundSize: \"cover\",\r\n    width: \"100%\",\r\n    height: \"100vh\",\r\n    overflow: \"scroll\" //this makes it able to scroll the innder component but the backgroudn remains fixed!!!\r\n  };\r\n\r\n  // picture=`url(${Headshot})`\r\n  //the height style doesnt work and the classname main header also doesnt work all that well\r\n  render() {\r\n    return (\r\n      <div style={this.sectionStyle}>\r\n        <Row style={{ height: \"10%\" }} />\r\n        <Row className=\"headerFont\" style={{ height: \"30%\" }}>\r\n          Hello \r\n        </Row>\r\n        <Row style={{ width: \"100%\" }}>\r\n          <Col span={4}>Col</Col>\r\n          <Col span={16}>\r\n            {/* this is where i want to render my info page, maybe make that a component */}\r\n            <InfoContainer />\r\n          </Col>\r\n          <Col span={4}>Col</Col>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// import logo from './logo.svg';\nimport * as React from 'react';\nimport \"./App.css\";\nimport 'antd/dist/antd.css';\nimport { HomeLayout } from './Components/HomeLayout';\n\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <HomeLayout/>\n      {/* <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/mountain-names.2c7da368.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Fall_2018_headshot.765a3d1b.jpg\";"],"sourceRoot":""}